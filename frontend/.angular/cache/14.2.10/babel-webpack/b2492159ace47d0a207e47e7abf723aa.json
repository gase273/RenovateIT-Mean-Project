{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\n\nconst error = {\n  message({\n    keyword,\n    schemaCode\n  }) {\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;\n  },\n\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{limit: ${schemaCode}}`\n};\nconst def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n    cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","ucs2length_1","error","message","keyword","schemaCode","comp","str","params","_","def","type","schemaType","$data","code","cxt","data","it","op","operators","GT","LT","len","opts","unicode","useFunc","gen","default","fail$data"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/validation/limitLength.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMG,KAAK,GAAG;EACVC,OAAO,CAAC;IAAEC,OAAF;IAAWC;EAAX,CAAD,EAA0B;IAC7B,MAAMC,IAAI,GAAGF,OAAO,KAAK,WAAZ,GAA0B,MAA1B,GAAmC,OAAhD;IACA,OAAO,CAAC,GAAGN,SAAS,CAACS,GAAd,CAAoB,iBAAgBD,IAAK,SAAQD,UAAW,aAAnE;EACH,CAJS;;EAKVG,MAAM,EAAE,CAAC;IAAEH;EAAF,CAAD,KAAoB,CAAC,GAAGP,SAAS,CAACW,CAAd,CAAkB,WAAUJ,UAAW;AALzD,CAAd;AAOA,MAAMK,GAAG,GAAG;EACRN,OAAO,EAAE,CAAC,WAAD,EAAc,WAAd,CADD;EAERO,IAAI,EAAE,QAFE;EAGRC,UAAU,EAAE,QAHJ;EAIRC,KAAK,EAAE,IAJC;EAKRX,KALQ;;EAMRY,IAAI,CAACC,GAAD,EAAM;IACN,MAAM;MAAEX,OAAF;MAAWY,IAAX;MAAiBX,UAAjB;MAA6BY;IAA7B,IAAoCF,GAA1C;IACA,MAAMG,EAAE,GAAGd,OAAO,KAAK,WAAZ,GAA0BN,SAAS,CAACqB,SAAV,CAAoBC,EAA9C,GAAmDtB,SAAS,CAACqB,SAAV,CAAoBE,EAAlF;IACA,MAAMC,GAAG,GAAGL,EAAE,CAACM,IAAH,CAAQC,OAAR,KAAoB,KAApB,GAA4B,CAAC,GAAG1B,SAAS,CAACW,CAAd,CAAkB,GAAEO,IAAK,SAArD,GAAgE,CAAC,GAAGlB,SAAS,CAACW,CAAd,CAAkB,GAAE,CAAC,GAAGT,MAAM,CAACyB,OAAX,EAAoBV,GAAG,CAACW,GAAxB,EAA6BzB,YAAY,CAAC0B,OAA1C,CAAmD,IAAGX,IAAK,GAA3J;IACAD,GAAG,CAACa,SAAJ,CAAc,CAAC,GAAG9B,SAAS,CAACW,CAAd,CAAkB,GAAEa,GAAI,IAAGJ,EAAG,IAAGb,UAAW,EAA1D;EACH;;AAXO,CAAZ;AAaAT,OAAO,CAAC+B,OAAR,GAAkBjB,GAAlB"},"metadata":{},"sourceType":"script"}