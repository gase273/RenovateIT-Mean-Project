{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: \"must match exactly one schema in oneOf\",\n  params: ({\n    params\n  }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`\n};\nconst def = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    if (it.opts.discriminator && parentSchema.discriminator) return;\n    const schArr = schema;\n    const valid = gen.let(\"valid\", false);\n    const passing = gen.let(\"passing\", null);\n    const schValid = gen.name(\"_valid\");\n    cxt.setParams({\n      passing\n    }); // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n\n    gen.block(validateOneOf);\n    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n\n    function validateOneOf() {\n      schArr.forEach((sch, i) => {\n        let schCxt;\n\n        if ((0, util_1.alwaysValidSchema)(it, sch)) {\n          gen.var(schValid, true);\n        } else {\n          schCxt = cxt.subschema({\n            keyword: \"oneOf\",\n            schemaProp: i,\n            compositeRule: true\n          }, schValid);\n        }\n\n        if (i > 0) {\n          gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();\n        }\n\n        gen.if(schValid, () => {\n          gen.assign(valid, true);\n          gen.assign(passing, i);\n          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);\n        });\n      });\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","error","message","params","_","passing","def","keyword","schemaType","trackErrors","code","cxt","gen","schema","parentSchema","it","Array","isArray","Error","opts","discriminator","schArr","valid","let","schValid","name","setParams","block","validateOneOf","result","reset","forEach","sch","i","schCxt","alwaysValidSchema","var","subschema","schemaProp","compositeRule","if","assign","else","mergeEvaluated","Name","default"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/applicator/oneOf.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: \"must match exactly one schema in oneOf\",\n    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,\n};\nconst def = {\n    keyword: \"oneOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, it } = cxt;\n        /* istanbul ignore if */\n        if (!Array.isArray(schema))\n            throw new Error(\"ajv implementation error\");\n        if (it.opts.discriminator && parentSchema.discriminator)\n            return;\n        const schArr = schema;\n        const valid = gen.let(\"valid\", false);\n        const passing = gen.let(\"passing\", null);\n        const schValid = gen.name(\"_valid\");\n        cxt.setParams({ passing });\n        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n        gen.block(validateOneOf);\n        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n        function validateOneOf() {\n            schArr.forEach((sch, i) => {\n                let schCxt;\n                if ((0, util_1.alwaysValidSchema)(it, sch)) {\n                    gen.var(schValid, true);\n                }\n                else {\n                    schCxt = cxt.subschema({\n                        keyword: \"oneOf\",\n                        schemaProp: i,\n                        compositeRule: true,\n                    }, schValid);\n                }\n                if (i > 0) {\n                    gen\n                        .if((0, codegen_1._) `${schValid} && ${valid}`)\n                        .assign(valid, false)\n                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)\n                        .else();\n                }\n                gen.if(schValid, () => {\n                    gen.assign(valid, true);\n                    gen.assign(passing, i);\n                    if (schCxt)\n                        cxt.mergeEvaluated(schCxt, codegen_1.Name);\n                });\n            });\n        }\n    },\n};\nexports.default = def;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}