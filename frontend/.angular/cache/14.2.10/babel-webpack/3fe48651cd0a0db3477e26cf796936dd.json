{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst ops = codegen_1.operators;\nconst KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: ({\n    keyword,\n    schemaCode\n  }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,\n  params: ({\n    keyword,\n    schemaCode\n  }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`\n};\nconst def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","ops","operators","KWDs","maximum","okStr","ok","LTE","fail","GT","minimum","GTE","LT","exclusiveMaximum","exclusiveMinimum","error","message","keyword","schemaCode","str","params","_","def","keys","type","schemaType","$data","code","cxt","data","fail$data","default"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/validation/limitNumber.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: { okStr: \"<=\", ok: ops.LTE, fail: ops.GT },\n    minimum: { okStr: \">=\", ok: ops.GTE, fail: ops.LT },\n    exclusiveMaximum: { okStr: \"<\", ok: ops.LT, fail: ops.GTE },\n    exclusiveMinimum: { okStr: \">\", ok: ops.GT, fail: ops.LTE },\n};\nconst error = {\n    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMC,GAAG,GAAGF,SAAS,CAACG,SAAtB;AACA,MAAMC,IAAI,GAAG;EACTC,OAAO,EAAE;IAAEC,KAAK,EAAE,IAAT;IAAeC,EAAE,EAAEL,GAAG,CAACM,GAAvB;IAA4BC,IAAI,EAAEP,GAAG,CAACQ;EAAtC,CADA;EAETC,OAAO,EAAE;IAAEL,KAAK,EAAE,IAAT;IAAeC,EAAE,EAAEL,GAAG,CAACU,GAAvB;IAA4BH,IAAI,EAAEP,GAAG,CAACW;EAAtC,CAFA;EAGTC,gBAAgB,EAAE;IAAER,KAAK,EAAE,GAAT;IAAcC,EAAE,EAAEL,GAAG,CAACW,EAAtB;IAA0BJ,IAAI,EAAEP,GAAG,CAACU;EAApC,CAHT;EAITG,gBAAgB,EAAE;IAAET,KAAK,EAAE,GAAT;IAAcC,EAAE,EAAEL,GAAG,CAACQ,EAAtB;IAA0BD,IAAI,EAAEP,GAAG,CAACM;EAApC;AAJT,CAAb;AAMA,MAAMQ,KAAK,GAAG;EACVC,OAAO,EAAE,CAAC;IAAEC,OAAF;IAAWC;EAAX,CAAD,KAA6B,CAAC,GAAGnB,SAAS,CAACoB,GAAd,CAAoB,WAAUhB,IAAI,CAACc,OAAD,CAAJ,CAAcZ,KAAM,IAAGa,UAAW,EAD5F;EAEVE,MAAM,EAAE,CAAC;IAAEH,OAAF;IAAWC;EAAX,CAAD,KAA6B,CAAC,GAAGnB,SAAS,CAACsB,CAAd,CAAkB,gBAAelB,IAAI,CAACc,OAAD,CAAJ,CAAcZ,KAAM,YAAWa,UAAW;AAFtG,CAAd;AAIA,MAAMI,GAAG,GAAG;EACRL,OAAO,EAAEtB,MAAM,CAAC4B,IAAP,CAAYpB,IAAZ,CADD;EAERqB,IAAI,EAAE,QAFE;EAGRC,UAAU,EAAE,QAHJ;EAIRC,KAAK,EAAE,IAJC;EAKRX,KALQ;;EAMRY,IAAI,CAACC,GAAD,EAAM;IACN,MAAM;MAAEX,OAAF;MAAWY,IAAX;MAAiBX;IAAjB,IAAgCU,GAAtC;IACAA,GAAG,CAACE,SAAJ,CAAc,CAAC,GAAG/B,SAAS,CAACsB,CAAd,CAAkB,GAAEQ,IAAK,IAAG1B,IAAI,CAACc,OAAD,CAAJ,CAAcT,IAAK,IAAGU,UAAW,aAAYW,IAAK,GAA5F;EACH;;AATO,CAAZ;AAWAhC,OAAO,CAACkC,OAAR,GAAkBT,GAAlB"},"metadata":{},"sourceType":"script"}