{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: ({\n    schemaCode\n  }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;\n    cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","error","message","schemaCode","str","params","_","def","keyword","type","schemaType","$data","code","cxt","gen","data","it","prec","opts","multipleOfPrecision","res","let","invalid","fail$data","default"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/validation/multipleOf.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAMC,KAAK,GAAG;EACVC,OAAO,EAAE,CAAC;IAAEC;EAAF,CAAD,KAAoB,CAAC,GAAGJ,SAAS,CAACK,GAAd,CAAoB,uBAAsBD,UAAW,EADxE;EAEVE,MAAM,EAAE,CAAC;IAAEF;EAAF,CAAD,KAAoB,CAAC,GAAGJ,SAAS,CAACO,CAAd,CAAkB,gBAAeH,UAAW;AAF9D,CAAd;AAIA,MAAMI,GAAG,GAAG;EACRC,OAAO,EAAE,YADD;EAERC,IAAI,EAAE,QAFE;EAGRC,UAAU,EAAE,QAHJ;EAIRC,KAAK,EAAE,IAJC;EAKRV,KALQ;;EAMRW,IAAI,CAACC,GAAD,EAAM;IACN,MAAM;MAAEC,GAAF;MAAOC,IAAP;MAAaZ,UAAb;MAAyBa;IAAzB,IAAgCH,GAAtC,CADM,CAEN;;IACA,MAAMI,IAAI,GAAGD,EAAE,CAACE,IAAH,CAAQC,mBAArB;IACA,MAAMC,GAAG,GAAGN,GAAG,CAACO,GAAJ,CAAQ,KAAR,CAAZ;IACA,MAAMC,OAAO,GAAGL,IAAI,GACd,CAAC,GAAGlB,SAAS,CAACO,CAAd,CAAkB,uBAAsBc,GAAI,OAAMA,GAAI,UAASH,IAAK,EADtD,GAEd,CAAC,GAAGlB,SAAS,CAACO,CAAd,CAAkB,GAAEc,GAAI,iBAAgBA,GAAI,GAFlD;IAGAP,GAAG,CAACU,SAAJ,CAAc,CAAC,GAAGxB,SAAS,CAACO,CAAd,CAAkB,IAAGH,UAAW,cAAaiB,GAAI,MAAKL,IAAK,IAAGZ,UAAW,KAAImB,OAAQ,IAAnG;EACH;;AAfO,CAAZ;AAiBAzB,OAAO,CAAC2B,OAAR,GAAkBjB,GAAlB"},"metadata":{},"sourceType":"script"}