{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: ({\n    params: {\n      min,\n      max\n    }\n  }) => max === undefined ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,\n  params: ({\n    params: {\n      min,\n      max\n    }\n  }) => max === undefined ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`\n};\nconst def = {\n  keyword: \"contains\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  trackErrors: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      data,\n      it\n    } = cxt;\n    let min;\n    let max;\n    const {\n      minContains,\n      maxContains\n    } = parentSchema;\n\n    if (it.opts.next) {\n      min = minContains === undefined ? 1 : minContains;\n      max = maxContains;\n    } else {\n      min = 1;\n    }\n\n    const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n    cxt.setParams({\n      min,\n      max\n    });\n\n    if (max === undefined && min === 0) {\n      (0, util_1.checkStrictMode)(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n      return;\n    }\n\n    if (max !== undefined && min > max) {\n      (0, util_1.checkStrictMode)(it, `\"minContains\" > \"maxContains\" is always invalid`);\n      cxt.fail();\n      return;\n    }\n\n    if ((0, util_1.alwaysValidSchema)(it, schema)) {\n      let cond = (0, codegen_1._)`${len} >= ${min}`;\n      if (max !== undefined) cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;\n      cxt.pass(cond);\n      return;\n    }\n\n    it.items = true;\n    const valid = gen.name(\"valid\");\n\n    if (max === undefined && min === 1) {\n      validateItems(valid, () => gen.if(valid, () => gen.break()));\n    } else if (min === 0) {\n      gen.let(valid, true);\n      if (max !== undefined) gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);\n    } else {\n      gen.let(valid, false);\n      validateItemsWithCount();\n    }\n\n    cxt.result(valid, () => cxt.reset());\n\n    function validateItemsWithCount() {\n      const schValid = gen.name(\"_valid\");\n      const count = gen.let(\"count\", 0);\n      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));\n    }\n\n    function validateItems(_valid, block) {\n      gen.forRange(\"i\", 0, len, i => {\n        cxt.subschema({\n          keyword: \"contains\",\n          dataProp: i,\n          dataPropType: util_1.Type.Num,\n          compositeRule: true\n        }, _valid);\n        block();\n      });\n    }\n\n    function checkLimits(count) {\n      gen.code((0, codegen_1._)`${count}++`);\n\n      if (max === undefined) {\n        gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());\n      } else {\n        gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());\n        if (min === 1) gen.assign(valid, true);else gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","error","message","params","min","max","undefined","str","_","def","keyword","type","schemaType","before","trackErrors","code","cxt","gen","schema","parentSchema","data","it","minContains","maxContains","opts","next","len","const","setParams","checkStrictMode","fail","alwaysValidSchema","cond","pass","items","valid","name","validateItems","if","break","let","validateItemsWithCount","result","reset","schValid","count","checkLimits","_valid","block","forRange","i","subschema","dataProp","dataPropType","Type","Num","compositeRule","assign","default"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/applicator/contains.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { min, max } }) => max === undefined\n        ? (0, codegen_1.str) `must contain at least ${min} valid item(s)`\n        : (0, codegen_1.str) `must contain at least ${min} and no more than ${max} valid item(s)`,\n    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._) `{minContains: ${min}}` : (0, codegen_1._) `{minContains: ${min}, maxContains: ${max}}`,\n};\nconst def = {\n    keyword: \"contains\",\n    type: \"array\",\n    schemaType: [\"object\", \"boolean\"],\n    before: \"uniqueItems\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        let min;\n        let max;\n        const { minContains, maxContains } = parentSchema;\n        if (it.opts.next) {\n            min = minContains === undefined ? 1 : minContains;\n            max = maxContains;\n        }\n        else {\n            min = 1;\n        }\n        const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n        cxt.setParams({ min, max });\n        if (max === undefined && min === 0) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored`);\n            return;\n        }\n        if (max !== undefined && min > max) {\n            (0, util_1.checkStrictMode)(it, `\"minContains\" > \"maxContains\" is always invalid`);\n            cxt.fail();\n            return;\n        }\n        if ((0, util_1.alwaysValidSchema)(it, schema)) {\n            let cond = (0, codegen_1._) `${len} >= ${min}`;\n            if (max !== undefined)\n                cond = (0, codegen_1._) `${cond} && ${len} <= ${max}`;\n            cxt.pass(cond);\n            return;\n        }\n        it.items = true;\n        const valid = gen.name(\"valid\");\n        if (max === undefined && min === 1) {\n            validateItems(valid, () => gen.if(valid, () => gen.break()));\n        }\n        else if (min === 0) {\n            gen.let(valid, true);\n            if (max !== undefined)\n                gen.if((0, codegen_1._) `${data}.length > 0`, validateItemsWithCount);\n        }\n        else {\n            gen.let(valid, false);\n            validateItemsWithCount();\n        }\n        cxt.result(valid, () => cxt.reset());\n        function validateItemsWithCount() {\n            const schValid = gen.name(\"_valid\");\n            const count = gen.let(\"count\", 0);\n            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));\n        }\n        function validateItems(_valid, block) {\n            gen.forRange(\"i\", 0, len, (i) => {\n                cxt.subschema({\n                    keyword: \"contains\",\n                    dataProp: i,\n                    dataPropType: util_1.Type.Num,\n                    compositeRule: true,\n                }, _valid);\n                block();\n            });\n        }\n        function checkLimits(count) {\n            gen.code((0, codegen_1._) `${count}++`);\n            if (max === undefined) {\n                gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true).break());\n            }\n            else {\n                gen.if((0, codegen_1._) `${count} > ${max}`, () => gen.assign(valid, false).break());\n                if (min === 1)\n                    gen.assign(valid, true);\n                else\n                    gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true));\n            }\n        }\n    },\n};\nexports.default = def;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}