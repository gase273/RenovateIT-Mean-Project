{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: ({\n    schemaCode\n  }) => (0, codegen_1.str)`must match pattern \"${schemaCode}\"`,\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{pattern: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt; // TODO regexp should be wrapped in try/catchs\n\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","code_1","require","codegen_1","error","message","schemaCode","str","params","_","def","keyword","type","schemaType","$data","code","cxt","data","schema","it","u","opts","unicodeRegExp","regExp","usePattern","fail$data","default"],"sources":["C:/Users/Pc/Desktop/RTI 3. god/6. semestar/PIA/Projekat/frontend/node_modules/ajv/dist/vocabularies/validation/pattern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAzB;;AACA,MAAME,KAAK,GAAG;EACVC,OAAO,EAAE,CAAC;IAAEC;EAAF,CAAD,KAAoB,CAAC,GAAGH,SAAS,CAACI,GAAd,CAAoB,uBAAsBD,UAAW,GADxE;EAEVE,MAAM,EAAE,CAAC;IAAEF;EAAF,CAAD,KAAoB,CAAC,GAAGH,SAAS,CAACM,CAAd,CAAkB,aAAYH,UAAW;AAF3D,CAAd;AAIA,MAAMI,GAAG,GAAG;EACRC,OAAO,EAAE,SADD;EAERC,IAAI,EAAE,QAFE;EAGRC,UAAU,EAAE,QAHJ;EAIRC,KAAK,EAAE,IAJC;EAKRV,KALQ;;EAMRW,IAAI,CAACC,GAAD,EAAM;IACN,MAAM;MAAEC,IAAF;MAAQH,KAAR;MAAeI,MAAf;MAAuBZ,UAAvB;MAAmCa;IAAnC,IAA0CH,GAAhD,CADM,CAEN;;IACA,MAAMI,CAAC,GAAGD,EAAE,CAACE,IAAH,CAAQC,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;IACA,MAAMC,MAAM,GAAGT,KAAK,GAAG,CAAC,GAAGX,SAAS,CAACM,CAAd,CAAkB,eAAcH,UAAW,KAAIc,CAAE,IAApD,GAA0D,CAAC,GAAGnB,MAAM,CAACuB,UAAX,EAAuBR,GAAvB,EAA4BE,MAA5B,CAA9E;IACAF,GAAG,CAACS,SAAJ,CAAc,CAAC,GAAGtB,SAAS,CAACM,CAAd,CAAkB,IAAGc,MAAO,SAAQN,IAAK,GAAvD;EACH;;AAZO,CAAZ;AAcAlB,OAAO,CAAC2B,OAAR,GAAkBhB,GAAlB"},"metadata":{},"sourceType":"script"}